" ==========================================================================
" Ren vimrc file, use "vim -u NONE" to launch vim without loading this file
" ==========================================================================


" ==========================================================================
"  Load Plug and plugins
" ==========================================================================

"this automates the process of 1st installing vim-plug and then doing
"PlugInstall
if empty(glob('~/.vim/autoload/plug.vim'))
  silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs
      \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
  autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
endif

call plug#begin('~/.vim/plugged')

" Plug 'python-mode/python-mode', { 'branch': 'develop' }
Plug 'Yggdroot/indentLine'
" Plug 'tmhedberg/SimpylFold'
Plug 'Konfekt/FastFold'
Plug 'vim-airline/vim-airline'
Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' }
Plug 'junegunn/fzf.vim'
Plug 'vim-syntastic/syntastic'
" Plug 'Valloric/YouCompleteMe', { 'do': './install.py' }
Plug 'airblade/vim-gitgutter'
Plug 'ntpeters/vim-better-whitespace'
Plug 'tpope/vim-surround'
Plug 'tpope/vim-commentary'
Plug 'tpope/vim-repeat'
Plug 'scrooloose/nerdtree'
Plug 'majutsushi/tagbar'
Plug 'mbbill/undotree'
Plug 'dbeniamine/cheat.sh-vim'
Plug 'plytophogy/vim-virtualenv'
" Plug 'davidhalter/jedi-vim'
" Plug 'Shougo/echodoc.vim'
Plug 'chrisbra/Recover.vim'
Plug 'yonchu/accelerated-smooth-scroll'
Plug 'rakr/vim-one'
Plug 'jszakmeister/vim-togglecursor'
Plug 'vim-scripts/ReplaceWithRegister'
"colorschemes
Plug 'altercation/vim-colors-solarized'
Plug 'colepeters/spacemacs-theme.vim'
Plug 'NLKNguyen/papercolor-theme'
Plug 'vim-airline/vim-airline-themes'
Plug 'cocopon/iceberg.vim'
Plug 'cseelus/vim-colors-lucid'
Plug 'kristijanhusak/vim-hybrid-material'
Plug 'morhetz/gruvbox'
Plug 'lifepillar/vim-solarized8'
Plug 'tomasiser/vim-code-dark'

call plug#end()

" ==========================================================================
"  My custom vimrc config
" ==========================================================================

" source $VIMRUNTIME/defaults.vim " Load vim defaults
set nocompatible
set ignorecase
set smartcase
set autoindent
set laststatus=2 "hide status bar
set clipboard=unnamedplus
""configure mouse only for scrolling
" set mouse=a
" " :nmap <LeftMouse> <nop>
" " :imap <LeftMouse> <nop>
" " :vmap <LeftMouse> <nop>
" :nmap <2-LeftMouse> <nop>
" :imap <2-LeftMouse> <nop>
" :vmap <2-LeftMouse> <nop>
" :nmap <RightMouse> <nop>
" :imap <RightMouse> <nop>
" :vmap <RightMouse> <nop>
" :nmap <2-RightMouse> <nop>
" :imap <2-RightMouse> <nop>
" :vmap <2-RightMouse> <nop>

" set nowrap
set noshowmode " Hide --INSERT-- since it is displayed in airline

" Redefine indents and tabs as 2 spaces
syntax on
""""""""""""set list listchars=tab:â–·â‹…,trail:.,nbsp:.
filetype plugin on
"filietype plugin indent on
au FileType py set autoindent
au FileType py set smartindent
au FileType py set textwidth=79 " PEP-8 Friendly

set tabstop=2 softtabstop=0 expandtab shiftwidth=2 smarttab



" Escape to normal mode by pressing   fd quickly (< 1000ms)
"made similar 
inoremap fd <ESC> :w<enter> 


" ==========================================================================
"  Setup Spacemacs like bindings
" ==========================================================================

" Set spacemacs bindings using space as leader
let mapleader = " "

" File handling commands
nnoremap <leader>fw :w<enter>
nnoremap <leader>fs :w<enter>
nnoremap <leader>ff :Files<enter>
nnoremap <leader>fr :History<enter>
nnoremap <leader>ft :NERDTreeToggle<enter>
nnoremap <leader>fq :q<enter>
nnoremap <leader>fx :x<enter>

"Escape from insert to normal mode
inoremap jj <ESC>

" clear searchhighlight using esc
" nnoremap <esc> :noh<return><esc>


" Searching commands
nnoremap <leader>/ :Ag<enter>

" Buffer manipulation commands
nnoremap <leader>bb :Buffers<enter>
nnoremap <leader>bn :bnext!<enter>
nnoremap <leader>bp :bprevious!<enter>
nnoremap <leader>bd :bdelete<enter>
nnoremap <leader><tab> <C-^>
nnoremap <leader>ba :bprevious!<enter>

" Window manipulation commands
nnoremap <leader>w/ :vsplit<enter>
nnoremap <leader>w- :split<enter>
nnoremap <leader>wm <C-w>o
nnoremap <leader>wh <C-w>h
nnoremap <leader>wj <C-w>j
nnoremap <leader>wk <C-w>k
nnoremap <leader>wl <C-w>l
nnoremap <leader>wa <C-w>h
nnoremap <leader>ws <C-w>j
nnoremap <leader>ww <C-w>k
nnoremap <leader>wd <C-w>l

"tabedits, To maximize the windows
" nnoremap <leader>t mr:tabedit %<enter>`r:TagbarToggle<CR><C-w>h
nnoremap <leader>t mr:tabedit %<enter>`r
"nnoremap <C-Tab>:tabprevious<CR>
nnoremap <leader>tn :tabnext<CR>
nnoremap <leader>tt :tabclose<enter>
""
" tagbar for browsing source code
nnoremap <leader>gh :TagbarToggle<CR>

" Error checking (Syntastic) commands
nnoremap <leader>el :SyntasticCheck<enter>:Errors<enter>
nnoremap <leader>en :lnext<enter>
nnoremap <leader>ep :lprevious<enter>
nmap     <leader>eN <leader>ep
""
" Set Ycm commands
" set rtp+=~/.vim/plugged/YouCompleteMe
nnoremap <leader>hh :YcmCompleter GetDoc<enter><leader>ww :res +15<enter>
nnoremap <leader>hd :vertical YcmCompleter GoTo<enter>
nnoremap <leader>hr :YcmCompleter GoToReferences<enter>
"set autoclose for ycm preview windows
let g:ycm_autoclose_preview_window_after_insertion = 1
let g:ycm_autoclose_preview_window_after_completion = 1
"turnoff ycm confirmation to load extra_conf files
let g:ycm_confirm_extra_conf = 1
" Exit command
nnoremap <leader>qq :qa<enter>

" Help and Commands list
nnoremap <leader><leader> :Commands<enter>
nnoremap <leader>h<leader> :Helptags<enter>

"specify vim to look for tags folder in current file, in current directory up untill   $HOME
set tags=./tags,tags;$HOME
"" ctags generated files only record the relative path to the source code , as a work around, chage wd to that of the current file
autocmd BufEnter * silent! lcd %:p:h

"indentLines
let g:indentLine_char = '¦'

""""""""""""""""""""""'FOLDING"""""""""""""""""""""""""""
""set foldnestmax=1
""""Toggle fold methods \fo
"let g:FoldMethod = 0
"map <leader>fo :call ToggleFold()<cr>
"fun! ToggleFold()
"    if g:FoldMethod == 0
"        exe 'set foldmethod=indent'
"        let g:FoldMethod = 1
"    else
"        exe 'set foldmethod=marker'
"        let g:FoldMethod = 0
"    endif
"endfun
"""Add markers (trigger on class Foo line)
"nnoremap ,f2 ^wywO#<c-r>0 {{{2<esc>
"nnoremap ,f3 ^wywO#<c-r>0 {{{3<esc>
"nnoremap ,f4 ^wywO#<c-r>0 {{{4<esc>
" nnoremap ,f1 ^wywO#<c-r>0 {{{1<esc>

" au BufWinLeave * mkview
" au BufWinEnter * silent loadview


""""""""""""""""MACROS""""""""""""""""""

" let @x=mf ww ww:q:si	€kb€kb€kb€kbe sim	`:w:w wa:: e:so €ku wawa wauu wa wajhh waaaau wh w wd:€ku€ku€kd wd wafq f:

"  ==========================================================================
"   Configure Plugins
" ==========================================================================
" " Colorscheme
set t_Co=256   " This is may or may not needed.
" set background=dark
" :hi Folded ctermbg=black
" colorscheme gruvbox
" colorscheme codedark
"set color for highlight
" hi Folded ctermbg=228

" Ycm debug innfo
let g:ycm_server_keep_logfiles = 1
let g:ycm_server_log_level = 'debug'

" Set the solarized airline theme
"let g:airline_theme = 'one'

"python-mode by default uses python2 syntax checker. Use python3 syntax
let g:pymode_python = 'python3'

" Set Syntastic checkers
let g:syntastic_check_on_open = 0
let g:syntastic_check_on_wq = 0
let g:syntastic_mode_map = { 'mode': 'passive' }
let g:syntastic_always_populate_loc_list = 1
" let g:syntastic_python_checkers = ['flake8']
let g:syntastic_aggregate_errors = 1
let g:syntastic_python_checkers = ['pylint', 'flake8']

"undefined symbol PyUnicde FromFormat 
"https://github.com/vim/vim/issues/2840
" set pythonthreedll=

" YCM requires utf-8 encoding to be set
set encoding=utf-8
cmap w!! w !sudo tee % >/dev/null
"INTERPRETER 
"to avoid connflicting python interpreters used by YCM
"let g:ycm_server_python_interpreter ='/home/gordonrust/.conda/envs/tf/bin/python'
" let g:ycm_server_python_interpreter = '/opt/anaconda/bin/python'

""Airline Customisation

" integrate tagbar with airline and display full object hieracrchy

let g:airline#extensions#tagbar#flags = 'f'  " show full tag hierarchy

" ================================WHITESPACES=========================
let g:show_spaces_that_precede_tabs=0
" let g:strip_whitespace_on_save = 1
"

"ECHODOC, vscode like function hits while typing
" Option 1: (doesn't work)
" let g:echodoc#enable_at_startup = 1
" let g:echodoc#type = 'floating'
" To use a custom highlight for the float window,
" change Pmenu to your highlight group
" highlight link EchoDocFloat Pmenu

" Option 2:
" To use echodoc, you must increase 'cmdheight' value.
" set cmdheight=2
" let g:echodoc_enable_at_startup = 1



" set number!
"Toggle linenummber
nnoremap <silent> <leader>r :set relativenumber! <bar> set nu!<CR>
